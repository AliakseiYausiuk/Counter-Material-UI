{"version":3,"sources":["State/reducer.ts","Components/Common/ButtonItem/ButtonItem.tsx","Components/Common/InputItem/InputIten.tsx","Components/Common/ListsItem/ListsItem.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["reducer","state","action","type","count","maxValue","minValue","errorCounter","ButtonItem","props","color","onClick","title","InputIten","error","err","helperText","value","label","variant","onChange","event","changeValue","Number","currentTarget","useStyles","makeStyles","createStyles","list","width","ListsItem","classes","className","primary","changeMaxValue","changeMinValue","theme","root","border","height","margin","paper","background","paperButton","grid__item","App","useReducer","counter","dispatchCounter","Grid","container","justify","item","xs","alignItems","Paper","size","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f8cf2e91.chunk.js","sourcesContent":["export const reducer = (state: any, action: any) => {\r\n  switch (action.type) {\r\n    case \"INCREMENT\": {\r\n      if (state.count < state.maxValue) {\r\n        if (state.maxValue === state.minValue) {\r\n          return {\r\n            ...state,\r\n            count: state.count,\r\n          };\r\n        }\r\n        return {\r\n          ...state,\r\n          count: state.count + 1,\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          count: state.count,\r\n        };\r\n      }\r\n    }\r\n    case \"DECREMENT\": {\r\n      if (state.count <= state.minValue) {\r\n        return {\r\n          ...state,\r\n          count: state.count,\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          count: state.count - 1,\r\n        };\r\n      }\r\n    }\r\n    case \"RESET\":\r\n      if (state.maxValue === state.minValue) {\r\n        return {\r\n          ...state,\r\n          count: state.count,\r\n        };\r\n      }\r\n      return { ...state, count: state.minValue };\r\n    case \"MIN-VALUE\": {\r\n      return { ...state, minValue: action.minValue };\r\n    }\r\n    case \"MAX-VALUE\": {\r\n      return { ...state, maxValue: action.maxValue };\r\n    }\r\n    case \"SET\": {\r\n      if (state.minValue === state.maxValue) {\r\n        return { ...state, errorCounter: true };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          count: state.minValue,\r\n          maxValue: state.maxValue,\r\n          errorCounter: false,\r\n        };\r\n      }\r\n    }\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button/Button\";\r\n\r\nexport type ButtonPropsType = {\r\n  title: string;\r\n  onClick: () => void;\r\n  color: \"inherit\" | \"default\" | \"primary\" | \"secondary\" | undefined;\r\n};\r\n\r\nexport const ButtonItem = (props: ButtonPropsType) => {\r\n  return (\r\n    <Button color={props.color} onClick={props.onClick}>\r\n      {props.title}\r\n    </Button>\r\n  );\r\n};\r\n","import React, { useState, ChangeEvent } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\n\r\nexport type InputItemPropsType = {\r\n  label: string;\r\n  changeValue: (value: number) => void;\r\n  value: number | string;\r\n  err: boolean;\r\n};\r\n\r\nexport const InputIten = (props: InputItemPropsType) => {\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    props.changeValue(Number(event.currentTarget.value));\r\n  };\r\n\r\n  return (\r\n    <TextField\r\n      error={props.err}\r\n      helperText={props.err ? \"Enter the correct number\" : \"\"}\r\n      value={props.value}\r\n      label={props.label}\r\n      variant=\"outlined\"\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport List from \"@material-ui/core/List/List\";\r\nimport ListItem from \"@material-ui/core/ListItem/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider/Divider\";\r\nimport { InputIten } from \"../InputItem/InputIten\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport createStyles from \"@material-ui/core/styles/createStyles\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    list: {\r\n      width: \"100%\",\r\n    },\r\n  })\r\n);\r\n\r\nexport type ListsItemPropsType = {\r\n  minValue: number | string;\r\n  maxValue: number | string;\r\n  changeMinValue: (minValue: number) => void;\r\n  changeMaxValue: (maxValue: number) => void;\r\n  err: boolean;\r\n};\r\n\r\nexport const ListsItem = (props: ListsItemPropsType) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <List className={classes.list}>\r\n      <Divider />\r\n      <ListItem>\r\n        <ListItemText primary=\"Max value\" />\r\n        <InputIten\r\n          label={\"Max value\"}\r\n          value={props.maxValue}\r\n          changeValue={props.changeMaxValue}\r\n          err={props.err}\r\n        />\r\n      </ListItem>\r\n      <Divider />\r\n      <ListItem>\r\n        <ListItemText primary=\"Min value\" />\r\n        <InputIten\r\n          label={\"Min value\"}\r\n          value={props.minValue}\r\n          changeValue={props.changeMinValue}\r\n          err={props.err}\r\n        />\r\n      </ListItem>\r\n      <Divider />\r\n    </List>\r\n  );\r\n};\r\n","import React, { useReducer } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport \"./App.css\";\nimport { Theme, createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup/ButtonGroup\";\nimport { reducer } from \"./State/reducer\";\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport { ButtonItem } from \"./Components/Common/ButtonItem/ButtonItem\";\nimport { ListsItem } from \"./Components/Common/ListsItem/ListsItem\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      border: \"2px solid black\",\n      height: \"600px\",\n      margin: \"20px \",\n    },\n    paper: {\n      height: \"100%\",\n      background: \"#FBCEB1\",\n      border: \"2px solid black\",\n    },\n    paperButton: {\n      width: \"100%\",\n      height: \"150px\",\n      background: \"#FBCEB1\",\n      border: \"2px solid black\",\n    },\n    grid__item: {\n      height: \"100%\",\n    },\n  })\n);\n\nexport type initialStateType = {\n  count: number;\n  minValue: number | string;\n  maxValue: number | string;\n  errorCounter: boolean;\n};\n\nfunction App() {\n  const classes = useStyles();\n  const initialState: initialStateType = {\n    count: 0,\n    minValue: \"\",\n    maxValue: \"\",\n    errorCounter: false,\n  };\n  const [counter, dispatchCounter] = useReducer(reducer, initialState);\n\n  const changeMinValue = (minValue: number) =>\n    dispatchCounter({ type: \"MIN-VALUE\", minValue: minValue });\n\n  const changeMaxValue = (maxValue: number) =>\n    dispatchCounter({ type: \"MAX-VALUE\", maxValue: maxValue });\n\n  return (\n    <Grid container justify=\"space-around\">\n      <Grid\n        item\n        className={classes.root}\n        xs={5}\n        container\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <Grid item xs={11}>\n          <Paper className={classes.paper}>\n            <Grid\n              className={classes.grid__item}\n              container\n              xs={12}\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <ListsItem\n                minValue={counter.minValue}\n                maxValue={counter.maxValue}\n                changeMinValue={changeMinValue}\n                changeMaxValue={changeMaxValue}\n                err={counter.errorCounter}\n              />\n            </Grid>\n          </Paper>\n        </Grid>\n        <Grid item xs={11}>\n          <Paper className={classes.paperButton}>\n            <Grid\n              className={classes.grid__item}\n              item\n              container\n              xs={12}\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <ButtonGroup size=\"large\" variant=\"contained\">\n                <ButtonItem\n                  color={\"primary\"}\n                  title={\"Set\"}\n                  onClick={() => dispatchCounter({ type: \"SET\" })}\n                />\n              </ButtonGroup>\n            </Grid>\n          </Paper>\n        </Grid>\n      </Grid>\n      <Grid\n        item\n        className={classes.root}\n        xs={5}\n        container\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <Grid item xs={11}>\n          <Paper className={classes.paper}>\n            <Grid\n              className={classes.grid__item}\n              container\n              xs={12}\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Typography variant=\"h1\">{counter?.count}</Typography>\n            </Grid>\n          </Paper>\n        </Grid>\n        <Grid item xs={11}>\n          <Paper className={classes.paperButton}>\n            <Grid\n              className={classes.grid__item}\n              item\n              container\n              xs={12}\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <ButtonGroup size=\"large\" variant=\"contained\">\n                <ButtonItem\n                  color={\"primary\"}\n                  title={\"+\"}\n                  onClick={() => dispatchCounter({ type: \"INCREMENT\" })}\n                />\n                <ButtonItem\n                  color={\"primary\"}\n                  title={\"-\"}\n                  onClick={() => dispatchCounter({ type: \"DECREMENT\" })}\n                />\n                <ButtonItem\n                  color={\"primary\"}\n                  title={\"Reset\"}\n                  onClick={() => dispatchCounter({ type: \"RESET\" })}\n                />\n              </ButtonGroup>\n            </Grid>\n          </Paper>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// text commit\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}